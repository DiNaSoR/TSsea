{"version":3,"file":"main.11bf3be3cbc183c62281.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACoC,CAAC;AACrC;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4CAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,sEAAsE;AACtE;AACA;AACA;AACA,iCAAiC,4CAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;UClLxB","sources":["webpack://opensail/./src/js/controls.js","webpack://opensail/webpack/runtime/getFullHash"],"sourcesContent":["/**\r\n * Controls class to handle user input\r\n */\r\nimport * as Utils from './utils.js'; // Import all utility functions as Utils namespace\r\n\r\nclass Controls {\r\n    /**\r\n     * Create a new Controls instance\r\n     * @param {Object} options - Controls configuration options\r\n     * @param {Function} options.onControlsChange - Callback for control changes\r\n     */\r\n    constructor(options = {}) {\r\n        // Control state\r\n        this.state = {\r\n            rudderAngle: 0, // -45 to 45 degrees\r\n            sailAngle: 0, // -90 to 90 degrees\r\n            throttle: 0, // 0 to 1 (for motor, if implemented)\r\n            cameraView: 'orbit', // Only orbit mode is now used\r\n            trim: 0, // Auto-trim control (0-1)\r\n        };\r\n        \r\n        // Control sensitivity\r\n        this.rudderSensitivity = 5; // Degrees per keypress/update\r\n        this.sailSensitivity = 10; // Degrees per keypress/update\r\n        \r\n        // Keys currently pressed\r\n        this.keys = {};\r\n        \r\n        // Callback when controls change\r\n        this.onControlsChange = options.onControlsChange || (() => {});\r\n        \r\n        // Bind methods\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.handleKeyUp = this.handleKeyUp.bind(this);\r\n        this.update = this.update.bind(this);\r\n        \r\n        // Set up event listeners\r\n        this.setupEventListeners();\r\n    }\r\n    \r\n    /**\r\n     * Set up event listeners for keyboard and touch\r\n     */\r\n    setupEventListeners() {\r\n        // Keyboard events\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n        window.addEventListener('keyup', this.handleKeyUp);\r\n        \r\n        // We could add touch/gamepad controls later\r\n    }\r\n    \r\n    /**\r\n     * Handle key down events\r\n     * @param {KeyboardEvent} event - Keyboard event\r\n     */\r\n    handleKeyDown(event) {\r\n        this.keys[event.key] = true;\r\n        \r\n        // Prevent default for game control keys\r\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd'].includes(event.key)) {\r\n            event.preventDefault();\r\n        }\r\n        \r\n        // Camera view changes - removed since we only use orbit mode now\r\n    }\r\n    \r\n    /**\r\n     * Handle key up events\r\n     * @param {KeyboardEvent} event - Keyboard event\r\n     */\r\n    handleKeyUp(event) {\r\n        this.keys[event.key] = false;\r\n    }\r\n    \r\n    /**\r\n     * Update controls based on current key state\r\n     * @param {number} deltaTime - Time since last update in seconds\r\n     */\r\n    update(deltaTime) {\r\n        let controlsChanged = false;\r\n        \r\n        // Calculate rudder input from keyboard\r\n        let rudderInput = 0;\r\n        if (this.keys['ArrowLeft'] || this.keys['a']) rudderInput -= 1;\r\n        if (this.keys['ArrowRight'] || this.keys['d']) rudderInput += 1;\r\n        \r\n        // Apply rudder input\r\n        if (rudderInput !== 0) {\r\n            const newRudderAngle = Utils.clamp(\r\n                this.state.rudderAngle + rudderInput * this.rudderSensitivity,\r\n                -45,\r\n                45\r\n            );\r\n            \r\n            if (newRudderAngle !== this.state.rudderAngle) {\r\n                this.state.rudderAngle = newRudderAngle;\r\n                controlsChanged = true;\r\n            }\r\n        } else {\r\n            // Return rudder to center when not actively turning\r\n            if (this.state.rudderAngle !== 0) {\r\n                const returnRate = 15 * deltaTime; // Degrees per second\r\n                \r\n                if (Math.abs(this.state.rudderAngle) < returnRate) {\r\n                    this.state.rudderAngle = 0;\r\n                } else if (this.state.rudderAngle > 0) {\r\n                    this.state.rudderAngle -= returnRate;\r\n                } else {\r\n                    this.state.rudderAngle += returnRate;\r\n                }\r\n                \r\n                controlsChanged = true;\r\n            }\r\n        }\r\n        \r\n        // Calculate sail input from keyboard\r\n        let sailInput = 0;\r\n        if (this.keys['ArrowUp'] || this.keys['w']) sailInput -= 1; // Tighten sail\r\n        if (this.keys['ArrowDown'] || this.keys['s']) sailInput += 1; // Loosen sail\r\n        \r\n        // Apply sail input\r\n        if (sailInput !== 0) {\r\n            const newSailAngle = Utils.clamp(\r\n                this.state.sailAngle + sailInput * this.sailSensitivity,\r\n                -90,\r\n                90\r\n            );\r\n            \r\n            if (newSailAngle !== this.state.sailAngle) {\r\n                this.state.sailAngle = newSailAngle;\r\n                controlsChanged = true;\r\n            }\r\n        }\r\n        \r\n        // Notify if controls changed\r\n        if (controlsChanged) {\r\n            this.notifyControlChange();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Notify callback about control changes\r\n     */\r\n    notifyControlChange() {\r\n        this.onControlsChange({\r\n            rudderAngle: this.state.rudderAngle,\r\n            sailAngle: this.state.sailAngle,\r\n            throttle: this.state.throttle,\r\n            cameraView: this.state.cameraView,\r\n            trim: this.state.trim,\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Reset controls to default state\r\n     */\r\n    reset() {\r\n        this.state = {\r\n            rudderAngle: 0,\r\n            sailAngle: 0,\r\n            throttle: 0,\r\n            cameraView: 'orbit',\r\n            trim: 0,\r\n        };\r\n        \r\n        this.notifyControlChange();\r\n    }\r\n    \r\n    /**\r\n     * Clean up by removing event listeners\r\n     */\r\n    dispose() {\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n        window.removeEventListener('keyup', this.handleKeyUp);\r\n    }\r\n}\r\n\r\n// Export the Controls class\r\nexport default Controls; ","__webpack_require__.h = () => (\"99802e4450b0a76b4b10\")"],"names":[],"sourceRoot":""}