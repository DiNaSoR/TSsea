{"version":3,"file":"main.2b03c4d2add37a1d22bd.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACoC,CAAC;;AAErC;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,iDAAiD;AACjD;AACA;AACA,+CAA+C;AAC/C,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4CAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;UCzNxB","sources":["webpack://opensail/./src/js/controls.js","webpack://opensail/webpack/runtime/getFullHash"],"sourcesContent":["/**\n * Controls class to handle user input\n */\nimport * as Utils from './utils.js'; // Import all utility functions as Utils namespace\n\nclass Controls {\n    /**\n     * Create a new Controls instance\n     * @param {Object} options - Controls configuration options\n     * @param {Function} options.onControlsChange - Callback for control changes\n     */\n    constructor(options = {}) {\n        // Control state\n        this.state = {\n            rudderAngle: 0, // -45 to 45 degrees\n            throttle: 0, // 0 to 1 (for motor)\n            cameraView: 'orbit', // Only orbit mode is now used\n        };\n        \n        // Control sensitivity - adjusted for more realistic boat handling\n        this.rudderSensitivity = 5.0; // Reduced for more gradual steering (was 5)\n        this.throttleSensitivity = 0.1; // Reduced for more gradual acceleration (was 0.1)\n        \n        // Keys currently pressed\n        this.keys = {};\n        \n        // Callback when controls change\n        this.onControlsChange = options.onControlsChange || (() => {});\n        \n        // Bind methods\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.update = this.update.bind(this);\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Set up event listeners for keyboard and touch\n     */\n    setupEventListeners() {\n        // Keyboard events\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // We could add touch/gamepad controls later\n    }\n    \n    /**\n     * Handle key down events\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    handleKeyDown(event) {\n        this.keys[event.key] = true;\n        \n        // Prevent default for game control keys\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd'].includes(event.key)) {\n            event.preventDefault();\n        }\n        \n        // Camera view changes - removed since we only use orbit mode now\n    }\n    \n    /**\n     * Handle key up events\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    handleKeyUp(event) {\n        this.keys[event.key] = false;\n    }\n    \n    /**\n     * Update controls based on current key state\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    update(deltaTime) {\n        let controlsChanged = false;\n        \n        // Calculate throttle and steering based on WASD keys\n        let throttleInput = 0;\n        let rudderInput = 0;\n        \n        // W/S for forward/backward throttle\n        if (this.keys['w']) throttleInput += 1;  // Forward\n        if (this.keys['s']) throttleInput -= 1;  // Backward/Brake\n        \n        // A/D for steering left/right\n        if (this.keys['a']) rudderInput -= 1;  // Left\n        if (this.keys['d']) rudderInput += 1;  // Right\n        \n        // Arrow keys as alternative controls\n        if (this.keys['ArrowUp']) throttleInput += 1;\n        if (this.keys['ArrowDown']) throttleInput -= 1;\n        if (this.keys['ArrowLeft']) rudderInput -= 1;\n        if (this.keys['ArrowRight']) rudderInput += 1;\n        \n        // Apply throttle input with realistic acceleration/deceleration\n        if (throttleInput !== 0) {\n            // Scale throttle sensitivity by deltaTime for consistent behavior\n            const adjustedSensitivity = this.throttleSensitivity * (deltaTime / (1/60));\n            \n            // Acceleration is slower than deceleration (realistic)\n            const throttleChangeRate = throttleInput > 0 ? adjustedSensitivity * 0.8 : adjustedSensitivity * 1.2;\n            \n            const newThrottle = Utils.clamp(\n                this.state.throttle + throttleInput * throttleChangeRate,\n                -0.5,  // Allow some reverse\n                1\n            );\n            \n            if (newThrottle !== this.state.throttle) {\n                this.state.throttle = newThrottle;\n                controlsChanged = true;\n            }\n        } else {\n            // Auto-decrease throttle when no key is pressed (gradual engine deceleration)\n            if (this.state.throttle !== 0) {\n                // Calculate direction of decrease\n                const decreaseDirection = this.state.throttle > 0 ? -1 : 1;\n                \n                // Deceleration rate based on deltaTime for consistency\n                const decreaseAmount = this.throttleSensitivity * 0.15 * (deltaTime / (1/60));\n                \n                // Move throttle toward zero\n                const newThrottle = Math.abs(this.state.throttle) <= decreaseAmount \n                    ? 0 \n                    : this.state.throttle + decreaseDirection * decreaseAmount;\n                \n                this.state.throttle = newThrottle;\n                controlsChanged = true;\n            }\n        }\n        \n        // Apply rudder input with realistic turning behavior\n        if (rudderInput !== 0) {\n            // Scale rudder sensitivity by deltaTime for consistent behavior\n            const adjustedSensitivity = this.rudderSensitivity * (deltaTime / (1/60));\n            \n            // Gradual rudder adjustment\n            const newRudderAngle = Utils.clamp(\n                this.state.rudderAngle + rudderInput * adjustedSensitivity,\n                -45, \n                45\n            );\n            \n            if (newRudderAngle !== this.state.rudderAngle) {\n                this.state.rudderAngle = newRudderAngle;\n                controlsChanged = true;\n            }\n        } else {\n            // Return rudder to center slowly when not actively turning (realistic helm behavior)\n            if (this.state.rudderAngle !== 0) {\n                // Calculate return direction\n                const returnDirection = this.state.rudderAngle > 0 ? -1 : 1;\n                \n                // Return rate based on deltaTime for consistency\n                // Slower return rate for realism (helm doesn't instantly center)\n                const returnRate = this.rudderSensitivity * 0.2 * (deltaTime / (1/60));\n                \n                // Calculate new angle\n                const newAngle = this.state.rudderAngle + returnDirection * returnRate;\n                \n                // Check if we've crossed zero\n                if ((returnDirection === -1 && newAngle < 0) || \n                    (returnDirection === 1 && newAngle > 0)) {\n                    this.state.rudderAngle = 0;\n                } else {\n                    this.state.rudderAngle = newAngle;\n                }\n                \n                controlsChanged = true;\n            }\n        }\n        \n        // Notify if controls changed\n        if (controlsChanged) {\n            this.notifyControlChange();\n        }\n    }\n    \n    /**\n     * Notify callback about control changes\n     */\n    notifyControlChange() {\n        this.onControlsChange({\n            rudderAngle: this.state.rudderAngle,\n            throttle: this.state.throttle,\n            cameraView: this.state.cameraView,\n            trim: this.state.trim,\n        });\n    }\n    \n    /**\n     * Reset controls to default state\n     */\n    reset() {\n        this.state = {\n            rudderAngle: 0,\n            throttle: 0,\n            cameraView: 'orbit',\n            trim: 0,\n        };\n        \n        this.notifyControlChange();\n    }\n    \n    /**\n     * Clean up by removing event listeners\n     */\n    dispose() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n    }\n}\n\n// Export the Controls class\nexport default Controls; ","__webpack_require__.h = () => (\"5481b4d6e86a025927fb\")"],"names":[],"sourceRoot":""}