{"version":3,"file":"main.7f3ea4a433b4692d4a0d.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACoC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,yCAAyC;AACzC,2BAA2B;AAC3B;AACA;AACA,8BAA8B;AAC9B,2BAA2B;AAC3B;AACA;AACA,0BAA0B;AAC1B,wBAAwB;AACxB;AACA;AACA,0BAA0B;AAC1B;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,gBAAgB;AACvF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,UAAU;AAChF,uDAAuD,cAAc;;AAErE;AACA;AACA;AACA;AACA,SAAS,UAAU;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kCAAkC,YAAY;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA,+CAA+C,kBAAkB,EAAE,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,cAAc;AACd;AACA,gEAAgE;AAChE,cAAc;AACd;AACA,sCAAsC;AACtC,cAAc;AACd;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+CAAc;AACzC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+CAAc;AACrD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA,+BAA+B,4CAAW;AAC1C;AACA;AACA;AACA,4BAA4B,4CAAW;AACvC;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;;AAEA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;ACljCpB;AACA;AACA;AAC2C;AACN;AACA;AACR;AACO,CAAC;AACwC;;AAE7E;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,mBAAmB;AAClC,eAAe,SAAS;AACxB;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAQ;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B,uDAAW;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAQ;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,wCAAwC,gDAAI;AAC5C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,qBAAqB,YAAY,qBAAqB;AACxG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,eAAe,2BAA2B,cAAc,yBAAyB;AACrI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,KAAK,iBAAiB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iDAAgB,sBAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mCAAmC;AACxF;AACA;AACA;AACA,iDAAiD,iCAAiC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E,cAAc;AACd;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,mDAAmD,sBAAsB,GAAG,cAAc;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iDAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,GAAG,0BAA0B,SAAS,2BAA2B,GAAG,iBAAiB;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAe,IAAI,EAAC;;;;;;;;UCr8BpB","sources":["webpack://opensail/./src/js/boat.js","webpack://opensail/./src/js/game.js","webpack://opensail/webpack/runtime/getFullHash"],"sourcesContent":["/**\n * Boat class to handle boat physics and visualization\n */\nimport * as Utils from './utils.js'; // Import all utility functions as Utils namespace\n\n/**\n * Boat class representing a sailboat in the game\n */\nclass Boat {\n    /**\n     * Create a new Boat\n     * @param {Object} options - Boat configuration options\n     * @param {string} options.id - Unique identifier for the boat\n     * @param {string} options.playerName - Name of the player controlling the boat\n     * @param {THREE.Vector3} options.position - Initial position\n     * @param {THREE.Quaternion} options.orientation - Initial orientation\n     * @param {number} options.length - Boat length in meters\n     * @param {number} options.width - Boat width in meters\n     * @param {THREE.Scene} options.scene - Three.js scene to add the boat to\n     */\n    constructor(options) {\n        console.log(\"Creating new boat with options:\", {\n            id: options.id,\n            playerName: options.playerName,\n            position: options.position ? options.position.toArray() : null,\n            hasScene: !!options.scene\n        });\n        \n        this.id = options.id || 'boat_' + Math.random().toString(36).substr(2, 9);\n        this.playerName = options.playerName || 'Player';\n        \n        // Physics properties\n        this.position = options.position || new THREE.Vector3(0, 0, 0);\n        this.orientation = options.orientation || new THREE.Quaternion();\n        this.velocity = new THREE.Vector3(0, 0, 0);\n        this.angularVelocity = new THREE.Vector3(0, 0, 0);\n        \n        // Boat dimensions\n        this.length = options.length || 6; // meters\n        this.width = options.width || 2; // meters\n        this.height = 2.5; // meters\n        \n        // Control properties\n        this.rudderAngle = 0; // degrees, -45 to 45\n        this.throttle = 0; // 0 to 1 for engine power\n        \n        // Boat state\n        this.heading = 0; // degrees, 0-359\n        this.speed = 0; // knots\n        \n        // Physics constants (will be tuned)\n        this.mass = 1000; // kg\n        this.dragCoefficient = 0.05;\n        this.enginePowerCoefficient = 2000; // Force in newtons at full throttle\n        this.rudderForceCoefficient = 15;\n        this.lateralResistanceCoefficient = 50;\n        \n        // 3D model properties\n        this.mesh = null;\n        this.scene = options.scene;\n        \n        // Initialize the 3D model\n        this.initMesh();\n        \n        // Engine effects\n        this.engineSound = null;\n        this.engineParticles = null;\n    }\n    \n    /**\n     * Initialize the 3D mesh for the boat\n     */\n    initMesh() {\n        console.log(\"Initializing boat mesh...\");\n        console.log(\"Scene available:\", !!this.scene);\n        console.log(\"window.ASSET_PATH:\", window.ASSET_PATH);\n        \n        try {\n            // Use GLTFLoader for loading .glb models\n            const loader = new GLTFLoader();\n            \n            // Try with multiple path formats\n            const modelPaths = [\n                window.ASSET_PATH.models + 'boat.glb',     // Using configured path\n                '/assets/models/boat.glb',                 // Absolute path from root\n                'assets/models/boat.glb',                  // No leading slash\n                './assets/models/boat.glb'                 // Relative path with dot\n            ];\n            \n            console.log(\"Attempting to load boat model with paths:\", modelPaths);\n            \n            // First check if the file exists using fetch\n            fetch(modelPaths[0])\n                .then(response => {\n                    console.log(\"Fetch response for boat model:\", response.status, response.statusText);\n                    \n                    if (!response.ok) {\n                        throw new Error(`File not accessible (status ${response.status})`);\n                    }\n                    console.log(\"boat.glb is accessible via fetch at:\", modelPaths[0]);\n                    // File exists, proceed with GLTFLoader\n                    return this.loadModelWithLoader(modelPaths[0]);\n                })\n                .catch(error => {\n                    console.error(\"Fetch failed:\", error);\n                    console.log(\"Trying alternate loading methods...\");\n                    this.tryNextPath(modelPaths, 1);\n                });\n                \n            // Create boat wake\n            this.createBoatWake();\n        } catch (e) {\n            console.error(\"Exception in initMesh:\", e);\n            this.createFallbackBoat();\n        }\n    }\n    \n    /**\n     * Load model with GLTFLoader\n     */\n    loadModelWithLoader(modelPath) {\n        console.log(`Loading boat model using GLTFLoader with path: ${modelPath}`);\n        console.log(`Scene available for boat model: ${this.hasScene}`);\n\n        // Add a timeout to handle the case where the model might not load\n        const modelLoadTimeout = setTimeout(() => {\n            console.log('Boat model loading timed out. Creating fallback mesh.');\n            this.createFallbackMesh();\n        }, 10000); // 10 seconds timeout\n\n        if (!this.hasScene) {\n            console.error('Cannot load model without a scene');\n            clearTimeout(modelLoadTimeout);\n            this.createFallbackMesh();\n            return;\n        }\n\n        const loader = new GLTFLoader();\n\n        // Progress tracking function for debugging\n        const onProgress = (xhr) => {\n            console.log(`Loaded ${xhr.loaded} bytes`);\n        };\n\n        loader.load(\n            modelPath,\n            (gltf) => {\n                clearTimeout(modelLoadTimeout);\n                console.log('Boat model loaded successfully', gltf);\n                this.processMesh(gltf.scene);\n            },\n            onProgress,\n            (error) => {\n                clearTimeout(modelLoadTimeout);\n                console.error('Error loading boat model:', error);\n                this.createFallbackMesh();\n            }\n        );\n    }\n    \n    /**\n     * Try loading the model with the next available path\n     */\n    tryNextPath(paths, index) {\n        if (index >= paths.length) {\n            console.error(\"All paths failed, creating fallback boat\");\n            this.createFallbackBoat();\n            return;\n        }\n        \n        const modelPath = paths[index];\n        console.log(\"Trying alternate path:\", modelPath);\n        \n        const loader = new GLTFLoader();\n        loader.load(\n            modelPath,\n            (gltf) => {\n                console.log(\"Boat model loaded successfully with alternate path:\", modelPath);\n                this.mesh = gltf.scene;\n                \n                // Set initial position and orientation\n                this.mesh.position.copy(this.position);\n                this.mesh.quaternion.copy(this.orientation);\n                \n                // Rotate the boat model 180 degrees around the Y axis\n                this.mesh.rotation.y = Math.PI; // 180 degrees in radians\n                \n                // Set a proper scale for the boat\n                const scale = 0.5; // Adjusted scale for better visibility\n                this.mesh.scale.set(scale, scale, scale);\n                \n                // Lower the boat position to reduce hovering\n                this.mesh.position.y -= 0.5; // Adjust this value as needed\n                \n                // Add to scene\n                if (this.scene) {\n                    this.scene.add(this.mesh);\n                    console.log(\"Boat added to scene with alternate path\");\n                } else {\n                    console.error(\"Scene not available for alternate path loading\");\n                }\n                \n                // Create player name label\n                this.createPlayerLabel();\n                \n                // Add the sail\n                this.addSail();\n                \n                // Set up shadows\n                this.setupShadows();\n                \n                // Log success\n                console.log(`Boat for ${this.playerName} loaded with alternate path`);\n            },\n            // onProgress callback\n            (xhr) => {\n                if (xhr.total && xhr.total > 0) {\n                    console.log((xhr.loaded / xhr.total * 100) + '% of boat model loaded (alternate path)');\n                }\n            },\n            // onError callback\n            (error) => {\n                console.error(`Error loading boat model with path ${modelPath}:`, error);\n                // Try the next path\n                this.tryNextPath(paths, index + 1);\n            }\n        );\n    }\n    \n    /**\n     * Load the boat texture (now handled by GLTFLoader for glb files)\n     */\n    loadTexture() {\n        // GLB files already include textures, so this method is not needed\n        // We'll keep it as a placeholder in case custom textures are needed later\n        console.log(\"Using textures embedded in the GLB file\");\n    }\n    \n    /**\n     * Create a simple fallback mesh if the model fails to load\n     */\n    createFallbackBoat() {\n        // Create a simple boat shape using primitive geometries\n        const boatGroup = new THREE.Group();\n        \n        // Hull\n        const hullGeometry = new THREE.BoxGeometry(this.length, this.height / 2, this.width);\n        const hullMaterial = new THREE.MeshPhongMaterial({ color: 0x3366ff });\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\n        hull.position.y = -this.height / 4;\n        boatGroup.add(hull);\n        \n        // Cabin\n        const cabinGeometry = new THREE.BoxGeometry(this.length / 3, this.height / 2, this.width * 0.8);\n        const cabinMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff });\n        const cabin = new THREE.Mesh(cabinGeometry, cabinMaterial);\n        cabin.position.set(0, this.height / 4, 0);\n        boatGroup.add(cabin);\n        \n        // Mast\n        const mastGeometry = new THREE.CylinderGeometry(0.05, 0.05, this.height * 2, 8);\n        const mastMaterial = new THREE.MeshPhongMaterial({ color: 0x999999 });\n        const mast = new THREE.Mesh(mastGeometry, mastMaterial);\n        mast.position.set(0, this.height, 0);\n        boatGroup.add(mast);\n        \n        // Sail\n        this.sail = new THREE.Group();\n        const sailGeometry = new THREE.PlaneGeometry(this.length * 0.7, this.height * 1.5);\n        const sailMaterial = new THREE.MeshPhongMaterial({ \n            color: 0xffffff,\n            side: THREE.DoubleSide\n        });\n        const sailMesh = new THREE.Mesh(sailGeometry, sailMaterial);\n        sailMesh.position.set(this.length * 0.2, 0, 0);\n        sailMesh.rotation.y = Math.PI / 2;\n        this.sail.add(sailMesh);\n        this.sail.position.set(0, this.height * 0.75, 0);\n        boatGroup.add(this.sail);\n        \n        // Center the boat\n        boatGroup.position.copy(this.position);\n        boatGroup.quaternion.copy(this.orientation);\n        \n        // Set as the boat mesh\n        this.mesh = boatGroup;\n        \n        // Add to scene\n        if (this.scene) {\n            this.scene.add(this.mesh);\n        }\n        \n        // Create player name label\n        this.createPlayerLabel();\n        \n        console.log(`Fallback boat for ${this.playerName} created`);\n    }\n    \n    /**\n     * Create a text label showing the player name\n     */\n    createPlayerLabel() {\n        // This would typically use a sprite with a dynamically generated texture\n        // For simplicity, we'll omit the actual implementation for now\n    }\n    \n    /**\n     * Update the boat physics\n     * @param {Object} environment - Environment information including wind and waves\n     * @param {number} deltaTime - Time step in seconds\n     */\n    update(environment, deltaTime) {\n        // Log controls for debugging\n        console.log(`Boat update - Controls: ${this.rudderAngle} ${this.throttle}`);\n        console.log(`Boat update - Environment:`, environment);\n        \n        // Ensure rudderAngle and throttle have valid defaults if they're undefined\n        if (this.rudderAngle === undefined) this.rudderAngle = 0;\n        if (this.throttle === undefined) this.throttle = 0;\n        \n        // Apply physics forces\n        this.applyPhysics(environment, deltaTime);\n        \n        // Update the visual mesh to match physics state\n        this.updateMesh();\n        \n        // If this is a local player boat and game has a network system\n        if (this.isLocalPlayer && typeof this.onPositionChanged === 'function') {\n            this.onPositionChanged(this.getState());\n        }\n    }\n    \n    /**\n     * Calculate forces acting on the boat\n     * @param {Object} wind - Wind information\n     * @param {Object} waves - Wave information\n     * @returns {THREE.Vector3} - Net force in newtons\n     */\n    calculateForces(wind, waves) {\n        console.log(\"Calculating forces with throttle:\", this.throttle, \"rudderAngle:\", this.rudderAngle);\n        \n        // Direction the boat is facing\n        const boatDirection = new THREE.Vector3(0, 0, 1);\n        boatDirection.applyQuaternion(this.orientation);\n        console.log(\"Boat direction:\", boatDirection.toArray().map(v => v.toFixed(2)));\n        \n        // Engine force\n        let engineForce = new THREE.Vector3();\n        if (this.throttle !== 0) {\n            // Allow for reverse by negating the force\n            const forceDirection = this.throttle < 0 ? -1 : 1;\n            const throttleValue = Math.abs(this.throttle);\n            \n            const forceMagnitude = this.enginePowerCoefficient * throttleValue * forceDirection;\n            engineForce = boatDirection.clone().multiplyScalar(forceMagnitude);\n            \n            console.log(\"Engine force:\", \n                \"throttle:\", this.throttle, \n                \"magnitude:\", forceMagnitude.toFixed(2), \n                \"vector:\", engineForce.toArray().map(v => v.toFixed(2)));\n            \n            // Create engine effects\n            this.createEngineEffects();\n        } else {\n            console.log(\"No engine force - throttle is zero\");\n        }\n        \n        // Rudder force (turning)\n        const rudderForce = new THREE.Vector3();\n        if (this.rudderAngle !== 0) {\n            console.log(\"Applying rudder force:\", this.rudderAngle);\n            \n            // Calculate rudder direction (perpendicular to boat direction)\n            const rudderDirection = new THREE.Vector3(boatDirection.z, 0, -boatDirection.x);\n            console.log(\"Rudder direction:\", rudderDirection.toArray().map(v => v.toFixed(2)));\n            \n            // Calculate boat speed for turning physics\n            const speedKnots = this.speed;\n            console.log(\"Current speed (knots):\", speedKnots.toFixed(2));\n            \n            // Modified turning physics for better responsiveness\n            // Maintain good turning capability at all speeds\n            \n            // Improved turn efficiency curve for better responsiveness\n            let turnEfficiency = 0;\n            \n            if (speedKnots < 1) {\n                // Better turning at very low speeds\n                turnEfficiency = 0.8 + speedKnots * 0.2; // Significantly improved minimum turning (was 0.5)\n            } else if (speedKnots < 5) {\n                // Increasing effectiveness as speed builds\n                turnEfficiency = 1.0 + (speedKnots - 1) * 0.05; // 1.0 to 1.2 range (was 0.8 to 1.0)\n            } else if (speedKnots < 10) {\n                // Peak turning efficiency at medium speeds (5-10 knots)\n                turnEfficiency = 1.2; // Enhanced peak efficiency (was 1.0)\n            } else {\n                // Less fall-off at higher speeds for better control\n                turnEfficiency = 1.2 - Math.min(0.3, (speedKnots - 10) * 0.02); // Slower falloff (was 0.03)\n            }\n            \n            // FIX: Invert rudder angle to fix the inverted controls\n            // Negative rudder angle should turn left, positive should turn right\n            const correctedRudderAngle = -this.rudderAngle;\n            \n            // Apply enhanced force scaling based on improved turn efficiency\n            const forceMagnitude = this.rudderForceCoefficient * correctedRudderAngle * turnEfficiency;\n            \n            rudderForce.copy(rudderDirection).multiplyScalar(forceMagnitude);\n            \n            // Apply angular velocity based on more responsive physics\n            // Using reduced moment of inertia for more agile turning\n            \n            // Further reduced moment of inertia for even better responsiveness\n            // Dividing by 3 to simulate a highly maneuverable boat (was divided by 2)\n            const momentOfInertia = (1/12) * this.mass * (this.length * this.length + this.width * this.width) / 3;\n            \n            // Direction is reversed when going backward\n            const directionModifier = this.velocity.dot(boatDirection) < 0 ? -1 : 1;\n            \n            // Calculate torque with increased response\n            const torque = correctedRudderAngle * turnEfficiency * directionModifier;\n            \n            // Angular acceleration with increased factor for more responsive turning\n            const angularAcceleration = torque / momentOfInertia * 0.05; // Increased from 0.02\n            \n            // Apply angular acceleration over time - more responsive than before\n            this.angularVelocity.y += angularAcceleration;\n            \n            // Increased maximum angular velocity for faster turning\n            const maxAngularVelocity = 1.0; // Increased from 0.5 - allows for faster turning\n            this.angularVelocity.y = THREE.MathUtils.clamp(\n                this.angularVelocity.y, \n                -maxAngularVelocity, \n                maxAngularVelocity\n            );\n        } else {\n            // Reduced deceleration for angular velocity - stays turning longer\n            this.angularVelocity.y *= 0.98; // Changed from 0.97 - slower decay when not turning\n        }\n        \n        // Drag forces (opposite to velocity)\n        const dragForce = new THREE.Vector3();\n        if (this.velocity.lengthSq() > 0) {\n            const velocityMagnitude = this.velocity.length();\n            \n            // Realistic drag increases with the square of velocity\n            const dragCoefficient = this.dragCoefficient * (1 + velocityMagnitude * 0.05);\n            \n            const dragMagnitude = dragCoefficient * velocityMagnitude * velocityMagnitude;\n            dragForce.copy(this.velocity).normalize().multiplyScalar(-dragMagnitude);\n        }\n        \n        // Sum all forces\n        return engineForce.add(rudderForce).add(dragForce);\n    }\n    \n    /**\n     * Create engine effects (particles and sound)\n     */\n    createEngineEffects() {\n        if (!this.scene) return;\n        \n        // Create engine particles if they don't exist yet\n        if (!this.engineParticles) {\n            // Create particle system for engine exhaust\n            const particleGeometry = new THREE.BufferGeometry();\n            const particleMaterial = new THREE.PointsMaterial({\n                color: 0x888888,\n                size: 0.1,\n                transparent: true,\n                opacity: 0.6\n            });\n            \n            // Create initial particles at the rear of the boat\n            const particleCount = 30;\n            const positions = new Float32Array(particleCount * 3);\n            \n            for (let i = 0; i < particleCount; i++) {\n                const i3 = i * 3;\n                positions[i3] = 0; // Will be set in updateEngineEffects\n                positions[i3 + 1] = 0; \n                positions[i3 + 2] = 0;\n            }\n            \n            particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            \n            // Create the particle system\n            this.engineParticles = {\n                system: new THREE.Points(particleGeometry, particleMaterial),\n                velocities: [],\n                lifetime: 2, // seconds\n                timer: 0\n            };\n            \n            // Initialize particle velocities\n            for (let i = 0; i < particleCount; i++) {\n                this.engineParticles.velocities.push({\n                    x: (Math.random() - 0.5) * 0.05,\n                    y: Math.random() * 0.1 + 0.05,\n                    z: -Math.random() * 0.2 - 0.1  // Mostly backward\n                });\n            }\n            \n            this.scene.add(this.engineParticles.system);\n        }\n        \n        // Update engine effects\n        this.updateEngineEffects();\n    }\n    \n    /**\n     * Update engine particle effects\n     */\n    updateEngineEffects() {\n        if (!this.engineParticles) return;\n        \n        // The boat direction\n        const boatDirection = new THREE.Vector3(0, 0, 1);\n        boatDirection.applyQuaternion(this.orientation);\n        \n        // Position at the back of the boat\n        const enginePosition = this.position.clone().sub(\n            boatDirection.clone().multiplyScalar(this.length * 0.45)\n        );\n        enginePosition.y += 0.5; // Slightly above water level\n        \n        // Get particle positions\n        const positions = this.engineParticles.system.geometry.attributes.position.array;\n        const particleCount = positions.length / 3;\n        \n        // Create new particles at the engine position based on throttle\n        const emissionRate = Math.ceil(Math.abs(this.throttle) * 2); // More particles at higher throttle\n        \n        for (let i = 0; i < emissionRate; i++) {\n            // Find an \"expired\" particle to reuse, or use a random one\n            let particleIndex = Math.floor(Math.random() * particleCount);\n            \n            const i3 = particleIndex * 3;\n            \n            // Reset position to engine\n            positions[i3] = enginePosition.x + (Math.random() - 0.5) * 0.1;\n            positions[i3 + 1] = enginePosition.y + (Math.random() - 0.5) * 0.1;\n            positions[i3 + 2] = enginePosition.z + (Math.random() - 0.5) * 0.1;\n            \n            // Determine emission direction based on throttle\n            // When in reverse, emit particles from the front of the boat\n            const isReverse = this.throttle < 0;\n            let particleDirection;\n            \n            if (isReverse) {\n                // When in reverse, emit from front of boat\n                particleDirection = boatDirection.clone();\n                // Position adjustment for reverse\n                const frontPosition = this.position.clone().add(\n                    boatDirection.clone().multiplyScalar(this.length * 0.45)\n                );\n                positions[i3] = frontPosition.x + (Math.random() - 0.5) * 0.1;\n                positions[i3 + 2] = frontPosition.z + (Math.random() - 0.5) * 0.1;\n            } else {\n                // Normal forward emission from rear\n                particleDirection = boatDirection.clone().negate();\n            }\n            \n            // Reset velocity - direction depends on boat orientation and throttle\n            const velocity = new THREE.Vector3(\n                (Math.random() - 0.5) * 0.05 + particleDirection.x * 0.1,\n                Math.random() * 0.1 + 0.05,\n                (Math.random() - 0.5) * 0.05 + particleDirection.z * 0.1\n            );\n            \n            this.engineParticles.velocities[particleIndex] = {\n                x: velocity.x,\n                y: velocity.y,\n                z: velocity.z\n            };\n        }\n        \n        // Update all particles\n        for (let i = 0; i < particleCount; i++) {\n            const i3 = i * 3;\n            \n            // Update position based on velocity\n            positions[i3] += this.engineParticles.velocities[i].x;\n            positions[i3 + 1] += this.engineParticles.velocities[i].y;\n            positions[i3 + 2] += this.engineParticles.velocities[i].z;\n            \n            // Apply gravity and fade to particles\n            this.engineParticles.velocities[i].y -= 0.001;\n        }\n        \n        // Adjust opacity based on throttle\n        this.engineParticles.system.material.opacity = 0.6 * Math.abs(this.throttle);\n        \n        // Mark positions for update\n        this.engineParticles.system.geometry.attributes.position.needsUpdate = true;\n    }\n    \n    /**\n     * Apply wave effects to the boat\n     * @param {Object} waves - Wave information\n     * @param {number} deltaTime - Time step in seconds\n     */\n    applyWaveEffects(waves, deltaTime) {\n        if (!waves || !waves.isActive) return;\n        \n        // Calculate wave height at boat position\n        const waveHeight = this.calculateWaveHeight(this.position, waves, Date.now() / 1000);\n        \n        // Adjust boat position based on wave height\n        this.position.y = waveHeight;\n        \n        // Calculate wave slope at boat position for pitch and roll\n        const slopeX = this.calculateWaveSlope(this.position, waves, Date.now() / 1000, 'x');\n        const slopeZ = this.calculateWaveSlope(this.position, waves, Date.now() / 1000, 'z');\n        \n        // Apply pitch and roll based on wave slope\n        const targetRotation = new THREE.Quaternion().setFromEuler(\n            new THREE.Euler(-slopeZ * 0.5, Utils.degToRad(this.heading) * -1, slopeX * 0.5)\n        );\n        \n        // Smoothly interpolate rotation\n        this.orientation.slerp(targetRotation, 2 * deltaTime);\n    }\n    \n    /**\n     * Calculate wave height at a given position\n     * @param {THREE.Vector3} position - Position to calculate height at\n     * @param {Object} waves - Wave parameters\n     * @param {number} time - Current time\n     * @returns {number} Wave height\n     */\n    calculateWaveHeight(position, waves, time) {\n        try {\n            // Simple sin wave function\n            // In a real implementation, would use a sum of multiple sine waves\n            const x = position.x;\n            const z = position.z;\n            const amplitude = waves.amplitude || 0.5;\n            const frequency = waves.frequency || 0.2;\n            const direction = waves.direction || 0;\n            const speed = waves.speed || 1;\n            \n            // Calculate directed coordinates\n            const dirRad = Utils.degToRad(direction);\n            const dx = x * Math.cos(dirRad) + z * Math.sin(dirRad);\n            \n            // Calculate height using sin wave\n            return amplitude * Math.sin(dx * frequency + time * speed);\n        } catch (e) {\n            console.warn(\"Error calculating wave height:\", e);\n            return 0; // Return 0 as a safe fallback\n        }\n    }\n    \n    /**\n     * Calculate wave slope at a given position\n     * @param {THREE.Vector3} position - Position to calculate slope at\n     * @param {Object} waves - Wave parameters\n     * @param {number} time - Current time\n     * @param {string} axis - Axis to calculate slope for ('x' or 'z')\n     * @returns {number} Wave slope\n     */\n    calculateWaveSlope(position, waves, time, axis) {\n        // Sample height at two nearby points to calculate slope\n        const delta = 0.1;\n        let pos1 = position.clone();\n        let pos2 = position.clone();\n        \n        if (axis === 'x') {\n            pos1.x -= delta;\n            pos2.x += delta;\n        } else {\n            pos1.z -= delta;\n            pos2.z += delta;\n        }\n        \n        const height1 = this.calculateWaveHeight(pos1, waves, time);\n        const height2 = this.calculateWaveHeight(pos2, waves, time);\n        \n        return (height2 - height1) / (2 * delta);\n    }\n    \n    /**\n     * Update the 3D mesh based on current state\n     */\n    updateMesh() {\n        console.log(\"Updating boat mesh...\");\n        \n        if (!this.mesh) {\n            console.warn(\"Cannot update mesh - mesh is null\");\n            return;\n        }\n        \n        try {\n            // Log current position before update\n            console.log(\"Current position before mesh update:\", \n                this.position.toArray().map(v => v.toFixed(2)));\n            \n            // Update position and orientation\n            this.mesh.position.copy(this.position);\n            console.log(\"Mesh position updated:\", \n                this.mesh.position.x.toFixed(2), \n                this.mesh.position.y.toFixed(2), \n                this.mesh.position.z.toFixed(2));\n            \n            // First apply the orientation from physics\n            this.mesh.quaternion.copy(this.orientation);\n            console.log(\"Mesh orientation updated\");\n            \n            // Then apply a fixed 180-degree rotation to show the back of the boat\n            // Create a rotation quaternion for 180 degrees around Y axis\n            const rotationY = new THREE.Quaternion().setFromAxisAngle(\n                new THREE.Vector3(0, 1, 0),\n                Math.PI  // 180 degrees in radians\n            );\n            \n            // Apply the rotation after the orientation\n            this.mesh.quaternion.multiply(rotationY);\n            \n            // Update sail rotation if we have a sail object\n            if (this.sail) {\n                this.sail.rotation.y = Utils.degToRad(this.rudderAngle);\n            }\n        } catch (e) {\n            console.error(\"Error updating mesh:\", e);\n        }\n    }\n    \n    /**\n     * Set boat controls\n     * @param {Object} controls - Control inputs\n     * @param {number} controls.rudderAngle - Rudder angle (-45 to 45 degrees)\n     * @param {number} controls.throttle - Throttle (0 to 1)\n     */\n    setControls(controls) {\n        if (controls.rudderAngle !== undefined) {\n            this.rudderAngle = Utils.clamp(controls.rudderAngle, -45, 45);\n        }\n        \n        if (controls.throttle !== undefined) {\n            this.throttle = Utils.clamp(controls.throttle, 0, 1);\n        }\n    }\n    \n    /**\n     * Handle server update for client-side interpolation\n     * @param {Object} state - Boat state from server\n     */\n    handleServerUpdate(state) {\n        // Update position and orientation for interpolation\n        this.serverPosition = new THREE.Vector3().fromArray(state.position);\n        this.serverOrientation = new THREE.Quaternion(\n            state.orientation[0],\n            state.orientation[1],\n            state.orientation[2],\n            state.orientation[3]\n        );\n        this.serverVelocity = new THREE.Vector3().fromArray(state.velocity);\n        this.heading = state.heading;\n        this.speed = state.speed;\n        \n        // Directly update controls\n        this.rudderAngle = state.rudderAngle;\n        this.throttle = state.throttle;\n    }\n    \n    /**\n     * Interpolate between current and server state\n     * @param {number} alpha - Interpolation factor (0-1)\n     */\n    interpolate(alpha) {\n        if (!this.serverPosition || !this.serverOrientation) return;\n        \n        // Interpolate position\n        this.position.lerp(this.serverPosition, alpha);\n        \n        // Interpolate orientation\n        this.orientation.slerp(this.serverOrientation, alpha);\n        \n        // Update mesh\n        this.updateMesh();\n    }\n    \n    /**\n     * Remove boat from scene and clean up resources\n     */\n    dispose() {\n        if (this.mesh && this.scene) {\n            this.scene.remove(this.mesh);\n            \n            // Dispose geometries and materials\n            if (this.mesh.traverse) {\n                this.mesh.traverse((child) => {\n                    if (child.geometry) child.geometry.dispose();\n                    if (child.material) {\n                        if (Array.isArray(child.material)) {\n                            child.material.forEach(material => material.dispose());\n                        } else {\n                            child.material.dispose();\n                        }\n                    }\n                });\n            }\n        }\n    }\n    \n    /**\n     * Add a sail to the loaded boat model\n     * For GLB models, this is optional as the model may already have a sail\n     */\n    addSail() {\n        // We don't add sails anymore because this is an engine boat\n        console.log(\"This is an engine boat - no sail needed\");\n    }\n    \n    /**\n     * Set up shadows for the boat\n     */\n    setupShadows() {\n        if (!this.mesh) return;\n        \n        // Add shadow casting/receiving to all meshes\n        this.mesh.traverse(child => {\n            if (child.isMesh) {\n                child.castShadow = true;\n                child.receiveShadow = true;\n            }\n        });\n        \n        console.log(\"Shadows set up for the boat\");\n    }\n    \n    /**\n     * Create a water splash effect\n     */\n    createWaterSplash() {\n        if (!this.scene) return;\n        \n        // Create a splash particle system\n        const splashGeometry = new THREE.BufferGeometry();\n        const splashMaterial = new THREE.PointsMaterial({\n            color: 0xFFFFFF,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Create particles\n        const particleCount = 50;\n        const positions = new Float32Array(particleCount * 3);\n        \n        // Initialize particles at the boat position\n        for (let i = 0; i < particleCount; i++) {\n            const i3 = i * 3;\n            positions[i3] = this.position.x + (Math.random() - 0.5) * this.width * 0.5;\n            positions[i3 + 1] = 0; // At water level\n            positions[i3 + 2] = this.position.z + (Math.random() - 0.5) * this.length * 0.5;\n        }\n        \n        splashGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        \n        // Create the particle system\n        this.splashParticles = new THREE.Points(splashGeometry, splashMaterial);\n        this.scene.add(this.splashParticles);\n        \n        // Store particle velocities\n        this.splashVelocities = [];\n        for (let i = 0; i < particleCount; i++) {\n            this.splashVelocities.push({\n                x: (Math.random() - 0.5) * 0.1,\n                y: Math.random() * 0.2,\n                z: (Math.random() - 0.5) * 0.1\n            });\n        }\n        \n        // Set splash lifetime\n        this.splashLifetime = 1; // seconds\n        this.splashTimer = 0;\n    }\n    \n    /**\n     * Update the water splash effect\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    updateWaterSplash(deltaTime) {\n        if (!this.splashParticles) return;\n        \n        // Increment splash timer\n        this.splashTimer += deltaTime;\n        \n        // If the splash has lived its lifetime, remove it\n        if (this.splashTimer >= this.splashLifetime) {\n            this.scene.remove(this.splashParticles);\n            this.splashParticles.geometry.dispose();\n            this.splashParticles.material.dispose();\n            this.splashParticles = null;\n            this.splashVelocities = null;\n            return;\n        }\n        \n        // Update particle positions based on velocity\n        const positions = this.splashParticles.geometry.attributes.position.array;\n        const particleCount = positions.length / 3;\n        \n        for (let i = 0; i < particleCount; i++) {\n            const i3 = i * 3;\n            \n            // Update position based on velocity\n            positions[i3] += this.splashVelocities[i].x;\n            positions[i3 + 1] += this.splashVelocities[i].y;\n            positions[i3 + 2] += this.splashVelocities[i].z;\n            \n            // Apply gravity to y velocity\n            this.splashVelocities[i].y -= 0.01;\n        }\n        \n        // Update particle opacity based on lifetime\n        const progress = this.splashTimer / this.splashLifetime;\n        this.splashParticles.material.opacity = 0.8 * (1 - progress);\n        \n        // Mark the attribute as needing an update\n        this.splashParticles.geometry.attributes.position.needsUpdate = true;\n    }\n    \n    /**\n     * Create a wake trail behind the boat\n     */\n    createBoatWake() {\n        if (!this.scene) return;\n        \n        // Create a curved wake trail using a simple mesh\n        const wakeWidth = this.width * 1.5;\n        const wakeLength = this.length * 4;\n        \n        // Create wake geometry\n        const wakeGeometry = new THREE.PlaneGeometry(wakeWidth, wakeLength, 8, 16);\n        \n        // Create wake material with transparency\n        const wakeMaterial = new THREE.MeshBasicMaterial({\n            color: 0xFFFFFF,\n            transparent: true,\n            opacity: 0.3,\n            side: THREE.DoubleSide\n        });\n        \n        // Create wake mesh\n        this.wakeMesh = new THREE.Mesh(wakeGeometry, wakeMaterial);\n        \n        // Position wake behind the boat at water level\n        this.wakeMesh.position.y = 0.05; // Slightly above water to avoid z-fighting\n        this.wakeMesh.rotation.x = Math.PI / 2; // Lay flat on water\n        \n        // Add to scene\n        this.scene.add(this.wakeMesh);\n    }\n    \n    /**\n     * Update the boat wake\n     */\n    updateBoatWake() {\n        if (!this.wakeMesh) return;\n        \n        // Position wake behind the boat\n        const boatPosition = this.position.clone();\n        const boatDirection = new THREE.Vector3(0, 0, -1);\n        boatDirection.applyQuaternion(this.orientation);\n        \n        // Offset wake behind the boat\n        const wakeOffset = boatDirection.clone().multiplyScalar(-this.length);\n        this.wakeMesh.position.copy(boatPosition.clone().add(wakeOffset));\n        this.wakeMesh.position.y = 0.05; // Keep at water level\n        \n        // Orient wake to match boat direction\n        this.wakeMesh.quaternion.copy(this.orientation);\n        this.wakeMesh.rotation.x = Math.PI / 2; // Make sure it stays flat\n        \n        // Adjust opacity based on speed\n        const maxOpacity = 0.3;\n        const speedFactor = Math.min(this.speed / 10, 1); // Max opacity at 10 knots\n        this.wakeMesh.material.opacity = maxOpacity * speedFactor;\n    }\n    \n    /**\n     * Create a simple fallback mesh when the model fails to load\n     */\n    createFallbackMesh() {\n        console.log('Creating fallback boat mesh');\n        \n        if (!this.hasScene) {\n            console.error('Cannot create fallback mesh without a scene');\n            return;\n        }\n        \n        // Create a simple boat shape using basic geometries\n        const hullGeometry = new THREE.BoxGeometry(2, 0.5, 5);\n        const hullMaterial = new THREE.MeshBasicMaterial({ color: 0x3366ff });\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\n        \n        // Add a simple cabin\n        const cabinGeometry = new THREE.BoxGeometry(1, 0.7, 2);\n        const cabinMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const cabin = new THREE.Mesh(cabinGeometry, cabinMaterial);\n        cabin.position.y = 0.5;\n        cabin.position.z = -0.5;\n        \n        // Create a group to hold the boat parts\n        this.mesh = new THREE.Group();\n        this.mesh.add(hull);\n        this.mesh.add(cabin);\n        \n        // Scale and position appropriately\n        this.mesh.scale.set(1, 1, 1);\n        this.mesh.position.copy(this.position);\n        \n        // Add to scene\n        if (this.scene) {\n            this.scene.add(this.mesh);\n            console.log('Fallback boat mesh added to scene');\n        }\n    }\n\n    // Add a method to process the loaded mesh\n    processMesh(meshScene) {\n        console.log('Processing loaded boat mesh');\n        \n        this.mesh = meshScene;\n        \n        // Set initial position and orientation\n        this.mesh.position.copy(this.position);\n        this.mesh.quaternion.copy(this.orientation);\n        console.log(\"Initial mesh position set:\", this.mesh.position.toArray());\n\n        // Rotate the boat model 180 degrees around the Y axis if needed\n        this.mesh.rotation.y = Math.PI; // 180 degrees in radians\n        console.log(\"Mesh rotation applied\");\n        \n        // Set a proper scale for the boat\n        const scale = 0.5; // Start with a moderate scale, adjust based on model size\n        this.mesh.scale.set(scale, scale, scale);\n        console.log(\"Mesh scale set:\", scale);\n        \n        // Lower the boat position to reduce hovering\n        this.mesh.position.y -= 0.5; // Adjust this value as needed\n        console.log(\"Adjusted mesh Y position:\", this.mesh.position.y);\n        \n        // Add boat to scene\n        if (this.scene) {\n            this.scene.add(this.mesh);\n            console.log(\"Boat added to scene successfully\");\n        } else {\n            console.error(\"Scene not available, cannot add boat mesh\");\n            return;\n        }\n        \n        // Create player name label if applicable\n        if (typeof this.createPlayerLabel === 'function') {\n            this.createPlayerLabel();\n        }\n        \n        // Add the sail if applicable\n        if (typeof this.addSail === 'function') {\n            this.addSail();\n        }\n        \n        // Set up shadows if applicable\n        if (typeof this.setupShadows === 'function') {\n            this.setupShadows();\n        }\n        \n        console.log(`Boat for ${this.playerName} processed and added to scene`);\n    }\n}\n\n// Export the Boat class\nexport default Boat; ","/**\n * Game class to manage the overall game state and coordinate components\n */\nimport Environment from './environment.js';\nimport Renderer from './renderer.js';\nimport Controls from './controls.js';\nimport Boat from './boat.js';\nimport * as Utils from './utils.js'; // Import all utility functions as Utils namespace\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nclass Game {\n    /**\n     * Create a new Game\n     * @param {Object} options - Game configuration options\n     * @param {HTMLCanvasElement} options.canvas - Canvas element for rendering\n     * @param {boolean} options.debug - Enable debug features\n     */\n    constructor(options = {}) {\n        this.canvas = options.canvas;\n        this.debug = options.debug || false;\n        \n        // Game objects\n        this.renderer = null;\n        this.environment = null;\n        this.boats = new Map(); // Map of boat id to boat object\n        this.localBoat = null; // Reference to the player's boat\n        this.controls = null;\n        this.course = null; // Will store race course data\n        \n        // Game state\n        this.state = {\n            isRunning: false,\n            isPaused: false,\n            raceStarted: false,\n            raceFinished: false,\n            raceTime: 0,\n            timeOfDay: 12, // Noon by default\n        };\n        \n        // Game configuration\n        this.config = {\n            boatCount: 1, // Number of boats (default single player)\n            initialPosition: new THREE.Vector3(0, 0, 0),\n            timeScale: 1, // For speeding up or slowing down physics\n        };\n        \n        // Multiplayer settings\n        this.multiplayer = {\n            enabled: false,\n            socket: null,\n            playerId: null,\n            serverUpdateRate: 20, // Hz\n            interpolation: true,\n            playerName: 'Player',\n        };\n        \n        // Initialize components\n        this.init();\n    }\n    \n    /**\n     * Initialize game components\n     */\n    init() {\n        console.log('Initializing game...');\n        \n        // Create renderer\n        this.renderer = new Renderer({\n            canvas: this.canvas,\n            debug: this.debug,\n        });\n        \n        // Create environment\n        this.environment = new Environment({\n            scene: this.renderer.scene,\n        });\n        \n        // Set environment in renderer for time of day effects\n        this.renderer.setEnvironment(this.environment);\n        \n        // Create controls\n        this.controls = new Controls({\n            onControlsChange: (controls) => this.handleControlsChange(controls),\n        });\n        \n        // Set up loading screen\n        this.showLoadingScreen();\n        \n        // Set up menu event listeners\n        this.setupMenuListeners();\n    }\n    \n    /**\n     * Show the loading screen\n     */\n    showLoadingScreen() {\n        const loadingScreen = document.getElementById('loading-screen');\n        const loadingBar = document.getElementById('loading-bar');\n        \n        if (loadingScreen) {\n            loadingScreen.style.display = 'flex';\n        }\n        \n        // Simulate loading progress\n        let progress = 0;\n        const loadingInterval = setInterval(() => {\n            progress += 5;\n            if (loadingBar) {\n                loadingBar.style.width = `${progress}%`;\n            }\n            \n            if (progress >= 100) {\n                clearInterval(loadingInterval);\n                // Show menu after loading\n                this.hideLoadingScreen();\n                this.showMenu();\n            }\n        }, 100);\n    }\n    \n    /**\n     * Hide the loading screen\n     */\n    hideLoadingScreen() {\n        const loadingScreen = document.getElementById('loading-screen');\n        if (loadingScreen) {\n            loadingScreen.style.display = 'none';\n        }\n    }\n    \n    /**\n     * Show the game menu\n     */\n    showMenu() {\n        const menu = document.getElementById('game-menu');\n        if (menu) {\n            menu.style.display = 'flex';\n        }\n    }\n    \n    /**\n     * Hide the game menu\n     */\n    hideMenu() {\n        const menu = document.getElementById('game-menu');\n        if (menu) {\n            menu.style.display = 'none';\n        }\n    }\n    \n    /**\n     * Set up menu button listeners\n     */\n    setupMenuListeners() {\n        const startButton = document.getElementById('start-game');\n        if (startButton) {\n            startButton.addEventListener('click', () => {\n                this.multiplayer.enabled = false;\n                this.hideMenu();\n                this.startSinglePlayer();\n            });\n        }\n        \n        const joinButton = document.getElementById('join-game');\n        if (joinButton) {\n            joinButton.addEventListener('click', () => {\n                this.multiplayer.enabled = true;\n                this.hideMenu();\n                this.startMultiplayer();\n            });\n        }\n        \n        // Update player name when input changes\n        const playerNameInput = document.getElementById('player-name');\n        if (playerNameInput) {\n            playerNameInput.addEventListener('input', (e) => {\n                this.multiplayer.playerName = e.target.value || 'Player';\n            });\n        }\n    }\n    \n    /**\n     * Start a single player game\n     */\n    startSinglePlayer() {\n        console.log('Starting single player game...');\n        \n        // Create a boat for the player\n        this.createLocalBoat();\n        console.log(\"Local boat created:\", !!this.localBoat);\n        \n        if (this.localBoat) {\n            console.log(\"Initial boat state:\", {\n                position: this.localBoat.position,\n                rudderAngle: this.localBoat.rudderAngle,\n                throttle: this.localBoat.throttle\n            });\n        }\n        \n        // Set up camera in orbit mode\n        this.setCameraView('orbit');\n        console.log(\"Camera view set to orbit\");\n        \n        // Set up a simple race course\n        this.setupRaceCourse();\n        console.log(\"Race course setup\");\n        \n        // Start the game loop\n        this.start();\n        console.log(\"Game started\");\n    }\n    \n    /**\n     * Start a multiplayer game\n     */\n    startMultiplayer() {\n        console.log('Starting multiplayer game...');\n        \n        // Connect to the server\n        this.connectToServer();\n        \n        // The rest will be handled by the server connection\n    }\n    \n    /**\n     * Create the local player's boat\n     */\n    createLocalBoat() {\n        console.log(\"Creating local boat...\");\n        console.log(\"Initial position:\", this.config.initialPosition);\n        \n        const boat = new Boat({\n            id: 'local_player',\n            playerName: this.multiplayer.playerName,\n            position: this.config.initialPosition.clone(),\n            orientation: new THREE.Quaternion(),\n            scene: this.renderer.scene,\n        });\n        \n        console.log(\"Boat created:\", !!boat);\n        if (boat) {\n            console.log(\"Boat details:\", {\n                id: boat.id,\n                position: boat.position,\n                mesh: !!boat.mesh\n            });\n        }\n        \n        this.boats.set(boat.id, boat);\n        this.localBoat = boat;\n        \n        console.log(\"Boat added to game boats collection\");\n        console.log(\"Local boat reference set:\", !!this.localBoat);\n        \n        // Update UI with player name\n        this.updatePlayerInfo();\n    }\n    \n    /**\n     * Set up a basic race course\n     */\n    setupRaceCourse() {\n        // Define a simple triangular course with start/finish line and buoys\n        this.course = {\n            startPosition: new THREE.Vector3(0, 0, 0),\n            buoys: [\n                { \n                    position: new THREE.Vector3(100, 0, 0),\n                    passed: false,\n                    mesh: null\n                },\n                { \n                    position: new THREE.Vector3(50, 0, 100),\n                    passed: false,\n                    mesh: null\n                },\n                { \n                    position: new THREE.Vector3(-50, 0, 50),\n                    passed: false,\n                    mesh: null\n                }\n            ],\n            finishPosition: new THREE.Vector3(0, 0, 0),\n            currentBuoy: 0,\n            laps: 1,\n            currentLap: 0,\n        };\n        \n        // Create visual markers for the course\n        this.createCourseMarkers();\n    }\n    \n    /**\n     * Create visual markers for the race course\n     */\n    createCourseMarkers() {\n        // Create buoys\n        const buoyGeometry = new THREE.SphereGeometry(2, 16, 16);\n        const buoyMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n        \n        this.course.buoys.forEach((buoy, index) => {\n            const buoyMesh = new THREE.Mesh(buoyGeometry, buoyMaterial);\n            buoyMesh.position.copy(buoy.position);\n            buoyMesh.position.y = 2; // Raise above water\n            this.renderer.scene.add(buoyMesh);\n            \n            // Store reference to the mesh\n            buoy.mesh = buoyMesh;\n            \n            // Add a pole\n            const poleGeometry = new THREE.CylinderGeometry(0.2, 0.2, 5, 8);\n            const poleMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff });\n            const pole = new THREE.Mesh(poleGeometry, poleMaterial);\n            pole.position.set(0, -1.5, 0);\n            buoyMesh.add(pole);\n            \n            // Add buoy number\n            // In a real implementation, we would add a sprite with text\n        });\n        \n        // Create start/finish line\n        const lineGeometry = new THREE.BoxGeometry(20, 0.5, 2);\n        const lineMaterial = new THREE.MeshPhongMaterial({ \n            color: 0xffffff,\n            transparent: true,\n            opacity: 0.7,\n        });\n        const startLine = new THREE.Mesh(lineGeometry, lineMaterial);\n        startLine.position.copy(this.course.startPosition);\n        startLine.position.y = 0.3; // Slightly above water\n        this.renderer.scene.add(startLine);\n    }\n    \n    /**\n     * Connect to multiplayer server\n     */\n    connectToServer() {\n        // Create a socket.io connection using our socketConnect helper\n        this.multiplayer.socket = window.socketConnect();\n        \n        // Set up socket event handlers\n        this.setupSocketHandlers();\n    }\n    \n    /**\n     * Set up socket.io event handlers\n     */\n    setupSocketHandlers() {\n        const socket = this.multiplayer.socket;\n        \n        // Handle connection\n        socket.on('connect', () => {\n            console.log('Connected to server');\n            \n            // Send player info to server\n            socket.emit('player_join', {\n                name: this.multiplayer.playerName\n            });\n        });\n        \n        // Handle player ID assignment\n        socket.on('player_id', (data) => {\n            console.log('Received player ID:', data.id);\n            this.multiplayer.playerId = data.id;\n            \n            // Create local boat with assigned ID\n            this.createLocalBoat();\n            \n            // Set up camera to follow the player's boat\n            this.renderer.setupBoatCamera(this.localBoat);\n        });\n        \n        // Handle game state update from server\n        socket.on('game_state', (data) => {\n            // Update game state\n            this.state.raceStarted = data.raceStarted;\n            this.state.raceFinished = data.raceFinished;\n            this.state.raceTime = data.raceTime;\n            \n            // Update environment\n            if (data.environment) {\n                this.environment.handleServerUpdate(data.environment);\n            }\n            \n            // Update boats\n            if (data.boats) {\n                this.updateBoatsFromServer(data.boats);\n            }\n            \n            // Check if the game is now running\n            if (!this.state.isRunning && data.raceStarted) {\n                this.start();\n            }\n        });\n        \n        // Handle disconnection\n        socket.on('disconnect', () => {\n            console.log('Disconnected from server');\n            \n            // Handle disconnection (e.g., show a message, return to menu)\n            this.stop();\n            this.showMenu();\n        });\n    }\n    \n    /**\n     * Update boats from server data\n     * @param {Array} boatData - Array of boat states from server\n     */\n    updateBoatsFromServer(boatData) {\n        // Process each boat in the server data\n        boatData.forEach(serverBoat => {\n            const boatId = serverBoat.id;\n            \n            if (boatId === this.multiplayer.playerId) {\n                // This is our boat - only update if significant drift\n                // Client prediction would normally handle our movement\n                if (this.localBoat) {\n                    // For now, just apply server state - replace with proper reconciliation later\n                    this.localBoat.handleServerUpdate(serverBoat);\n                }\n            } else {\n                // This is another player's boat\n                if (this.boats.has(boatId)) {\n                    // Update existing boat\n                    this.boats.get(boatId).handleServerUpdate(serverBoat);\n                } else {\n                    // Create new boat\n                    const newBoat = new Boat({\n                        id: boatId,\n                        playerName: serverBoat.playerName || 'Other Player',\n                        scene: this.renderer.scene,\n                    });\n                    \n                    // Apply server state\n                    newBoat.handleServerUpdate(serverBoat);\n                    \n                    // Add to boats collection\n                    this.boats.set(boatId, newBoat);\n                }\n            }\n        });\n        \n        // Check for boats that no longer exist on server (player left)\n        this.boats.forEach((boat, id) => {\n            const stillExists = boatData.some(serverBoat => serverBoat.id === id);\n            \n            if (!stillExists && id !== this.multiplayer.playerId) {\n                // Remove boat that's no longer on the server\n                boat.dispose();\n                this.boats.delete(id);\n            }\n        });\n    }\n    \n    /**\n     * Start the game\n     */\n    start() {\n        if (this.state.isRunning) return;\n        \n        console.log('Starting game...');\n        \n        // Set game state\n        this.state.isRunning = true;\n        this.state.isPaused = false;\n        \n        // Output debug information\n        console.log(\"Game components:\", {\n            renderer: !!this.renderer,\n            environment: !!this.environment,\n            localBoat: !!this.localBoat,\n            controls: !!this.controls,\n            course: !!this.course,\n            state: this.state\n        });\n        \n        if (this.localBoat) {\n            console.log(\"Boat initial state:\", {\n                position: this.localBoat.position,\n                velocity: this.localBoat.velocity,\n                rudderAngle: this.localBoat.rudderAngle,\n                throttle: this.localBoat.throttle,\n                mesh: !!this.localBoat.mesh\n            });\n        }\n        \n        // Start the renderer\n        this.renderer.start((deltaTime) => this.update(deltaTime));\n        \n        // Hide UI elements\n        this.hideMenu();\n        \n        // Update UI\n        this.updateUI();\n    }\n    \n    /**\n     * Update game state and all game objects\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    update(deltaTime) {\n        // Skip update if game is not running or is paused\n        if (!this.state.isRunning || this.state.isPaused) {\n            return;\n        }\n\n        // Optional debug output to reduce spam, only log every 60 frames\n        if (this.frameCount % 60 === 0) {\n            console.log(`Game update: deltaTime=${deltaTime.toFixed(4)}, running=${this.state.isRunning}`);\n        }\n        this.frameCount++;\n\n        // Make sure we have valid controls and localBoat\n        if (this.controls && this.localBoat) {\n            // First, update controls based on user input\n            this.controls.update(deltaTime);\n            \n            // Then apply the control values to the boat\n            // Make sure we're using default values of 0 if controls are undefined\n            this.localBoat.rudderAngle = this.controls.rudderAngle || 0;\n            this.localBoat.throttle = this.controls.throttle || 0;\n            \n            console.log(`Applied controls to boat: {rudderAngle: ${this.localBoat.rudderAngle}, throttle: ${this.localBoat.throttle}}`);\n        }\n\n        // Update environment\n        this.environment.update(deltaTime, this.localBoat);\n        \n        // Update all boats\n        this.boats.forEach(boat => {\n            // Make sure we're passing a valid environment state\n            const validEnvironmentState = this.environment.update(deltaTime, boat) || {\n                wind: { direction: 0, speed: 0 },\n                waves: { isActive: true, amplitude: 0.5, frequency: 0.2, direction: 0, speed: 1 }\n            };\n            \n            boat.update(validEnvironmentState, deltaTime);\n            \n            // Debug boat update (only for local boat to avoid spam)\n            if (boat === this.localBoat && Math.floor(Date.now() / 1000) % 3 === 0) {\n                console.log(\"Boat updated with environment:\", validEnvironmentState);\n            }\n        });\n        \n        // Check boat position against course markers\n        if (this.localBoat && this.course) {\n            this.checkCourseProgress();\n        }\n        \n        // Update camera based on view\n        if (this.localBoat && this.renderer) {\n            switch(this.cameraView) {\n                case 'first-person':\n                    this.updateFirstPersonCamera();\n                    break;\n                    \n                case '3rd-person':\n                    this.update3rdPersonCamera();\n                    break;\n                    \n                case 'orbit':\n                    // Orbit controls are updated in the renderer animation loop\n                    // We just need to ensure the target is set correctly\n                    if (this.renderer.controls) {\n                        this.renderer.controls.target.copy(this.localBoat.position);\n                    }\n                    break;\n                    \n                // top-down has static camera, no updates needed\n            }\n        }\n        \n        // Update UI\n        this.updateUI();\n        \n        // Send updates to server if in multiplayer mode\n        if (this.multiplayer.enabled && this.multiplayer.socket && this.localBoat) {\n            this.sendUpdatesToServer();\n        }\n        \n        // Update race time if race started\n        if (this.state.raceStarted && !this.state.raceFinished) {\n            this.state.raceTime += scaledDeltaTime;\n        }\n    }\n    \n    /**\n     * Check the player's progress on the race course\n     */\n    checkCourseProgress() {\n        if (!this.localBoat || !this.course) return;\n        \n        // Get the next buoy to pass\n        const nextBuoy = this.course.buoys[this.course.currentBuoy];\n        \n        // Check distance to next buoy\n        const distance = this.localBoat.position.distanceTo(nextBuoy.position);\n        \n        // If close enough to the buoy, mark it as passed\n        if (distance < 10 && !nextBuoy.passed) {\n            console.log(`Passed buoy ${this.course.currentBuoy + 1}`);\n            nextBuoy.passed = true;\n            \n            // Change buoy color to green to indicate it's been passed\n            if (nextBuoy.mesh) {\n                nextBuoy.mesh.material.color.set(0x00ff00);\n            }\n            \n            // Move to next buoy\n            this.course.currentBuoy = (this.course.currentBuoy + 1) % this.course.buoys.length;\n            \n            // If we've completed a lap\n            if (this.course.currentBuoy === 0) {\n                this.course.currentLap++;\n                console.log(`Completed lap ${this.course.currentLap} of ${this.course.laps}`);\n                \n                // Reset buoys for next lap\n                if (this.course.currentLap < this.course.laps) {\n                    this.course.buoys.forEach(buoy => {\n                        buoy.passed = false;\n                        if (buoy.mesh) {\n                            buoy.mesh.material.color.set(0xff0000);\n                        }\n                    });\n                } else {\n                    // Race finished\n                    this.finishRace();\n                }\n            }\n            \n            // Update UI\n            this.updateCourseInfo();\n        }\n    }\n    \n    /**\n     * Handle race finish\n     */\n    finishRace() {\n        console.log('Race finished!');\n        this.state.raceFinished = true;\n        \n        // Show race results\n        this.showRaceResults();\n    }\n    \n    /**\n     * Show race results\n     */\n    showRaceResults() {\n        // In a real implementation, this would display a UI with race results\n        alert(`Race Finished! Time: ${Utils.formatTime(this.state.raceTime)}`);\n    }\n    \n    /**\n     * Send updates to the server\n     */\n    sendUpdatesToServer() {\n        if (!this.multiplayer.enabled || !this.multiplayer.socket || !this.localBoat) return;\n        \n        // Get current boat state\n        const boatState = this.localBoat.update(\n            this.environment.update(0, null), // Get current environment without updating\n            0 // Don't update physics again\n        );\n        \n        // Send boat state to server\n        this.multiplayer.socket.emit('boat_update', boatState);\n    }\n    \n    /**\n     * Handle controls changes from the Controls class\n     * @param {Object} controls - Current control state\n     */\n    handleControlsChange(controls) {\n        // Apply controls to local boat\n        if (this.localBoat) {\n            this.localBoat.setControls({\n                rudderAngle: controls.rudderAngle,\n                throttle: controls.throttle\n            });\n            \n            // Add debug output to verify controls are changing\n            console.log(\"Controls updated:\", controls.rudderAngle, controls.throttle);\n        }\n        \n        // We no longer need to handle camera view changes since we only use orbit mode\n    }\n    \n    /**\n     * Set camera view mode\n     * @param {string} view - Camera view mode ('orbit', 'first-person', 'top-down', '3rd-person')\n     */\n    setCameraView(view) {\n        if (!this.renderer) return;\n        \n        // Store the current view\n        this.cameraView = view;\n        \n        // Prevent the context menu on right-click for better camera control\n        // Apply this globally regardless of camera mode\n        this.renderer.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n        \n        switch(view) {\n            case 'top-down':\n                // Clean up any existing controls\n                if (this.renderer.controls) {\n                    this.renderer.controls.dispose();\n                    this.renderer.controls = null;\n                }\n                \n                // Set the camera position high above\n                this.renderer.camera.position.set(0, 100, 0);\n                this.renderer.camera.lookAt(0, 0, 0);\n                break;\n                \n            case 'first-person':\n                // Clean up any existing controls\n                if (this.renderer.controls) {\n                    this.renderer.controls.dispose();\n                    this.renderer.controls = null;\n                }\n                \n                this.renderer.setupBoatCamera(this.localBoat);\n                this.renderer.followBoatMode = true;\n                break;\n\n            case 'orbit':\n                // Set up OrbitControls centered on the boat\n                if (this.renderer.controls) {\n                    this.renderer.controls.dispose();\n                }\n                \n                // Set the boat as follow target to ensure camera follows it\n                this.renderer.setupControls();\n                this.renderer.followBoat = this.localBoat;\n                this.renderer.followBoatMode = true;\n                break;\n                \n            case '3rd-person':\n                // Clean up any existing controls\n                if (this.renderer.controls) {\n                    this.renderer.controls.dispose();\n                    this.renderer.controls = null;\n                }\n                \n                this.renderer.followBoat = this.localBoat;\n                this.renderer.followBoatMode = true;\n                break;\n        }\n    }\n    \n    /**\n     * Update the 3rd person camera position\n     */\n    update3rdPersonCamera() {\n        if (!this.localBoat || !this.renderer) return;\n        \n        const boat = this.localBoat;\n        const camera = this.renderer.camera;\n        \n        // Get boat's position and direction\n        const boatPosition = boat.position.clone();\n        const boatDirection = new THREE.Vector3(0, 0, 1).applyQuaternion(boat.orientation);\n        \n        // Calculate camera position: behind and above the boat\n        // Adjust these values to get the desired camera position\n        const distanceBehind = 10; // Distance behind the boat\n        const heightAbove = 5;    // Height above the boat\n        \n        // Calculate the position behind the boat using its direction\n        const cameraOffset = boatDirection.clone().multiplyScalar(-distanceBehind);\n        cameraOffset.y = heightAbove;\n        \n        // Set camera position\n        const targetCameraPosition = boatPosition.clone().add(cameraOffset);\n        \n        // Smoothly interpolate current camera position to target position\n        camera.position.lerp(targetCameraPosition, 0.05);\n        \n        // Look at a point slightly ahead of the boat\n        const lookAtOffset = boatDirection.clone().multiplyScalar(5);\n        const lookAtPosition = boatPosition.clone().add(lookAtOffset);\n        lookAtPosition.y += 1; // Look slightly above the boat\n        \n        camera.lookAt(lookAtPosition);\n    }\n    \n    /**\n     * Update the UI with current game state\n     */\n    updateUI() {\n        this.updateWindIndicator();\n        this.updateBoatInfo();\n        this.updateRaceInfo();\n    }\n    \n    /**\n     * Update the wind indicator in the UI\n     */\n    updateWindIndicator() {\n        const windArrow = document.getElementById('wind-arrow');\n        const windSpeed = document.getElementById('wind-speed');\n        \n        if (windArrow && this.environment) {\n            // Rotate arrow to point in wind direction\n            windArrow.style.transform = `rotate(${this.environment.wind.direction}deg)`;\n        }\n        \n        if (windSpeed && this.environment) {\n            // Display wind speed in knots (1 m/s ≈ 1.94 knots)\n            const knotsSpeed = (this.environment.wind.speed * 1.94).toFixed(1);\n            windSpeed.textContent = `${knotsSpeed} knots`;\n        }\n    }\n    \n    /**\n     * Update boat information in the UI\n     */\n    updateBoatInfo() {\n        const headingElement = document.getElementById('heading');\n        const speedElement = document.getElementById('speed');\n        const throttleElement = document.getElementById('throttle');\n        const rudderElement = document.getElementById('rudder');\n        \n        if (headingElement && this.localBoat) {\n            headingElement.textContent = `Heading: ${Math.round(this.localBoat.heading)}°`;\n        }\n        \n        if (speedElement && this.localBoat) {\n            speedElement.textContent = `Speed: ${this.localBoat.speed.toFixed(1)} knots`;\n        }\n        \n        if (throttleElement && this.localBoat) {\n            // Convert throttle from -0.5 to 1 range to percentage display\n            let throttlePercent;\n            if (this.localBoat.throttle >= 0) {\n                // Forward throttle: 0-100%\n                throttlePercent = Math.round(this.localBoat.throttle * 100);\n                throttleElement.textContent = `Throttle: ${throttlePercent}% Forward`;\n            } else {\n                // Reverse throttle: 0-50%\n                throttlePercent = Math.round(Math.abs(this.localBoat.throttle) * 100);\n                throttleElement.textContent = `Throttle: ${throttlePercent}% Reverse`;\n            }\n        }\n        \n        if (rudderElement && this.localBoat) {\n            const rudderAngle = Math.round(this.localBoat.rudderAngle);\n            let turnDirection = \"\";\n            \n            if (rudderAngle < 0) {\n                turnDirection = \" Left\";\n            } else if (rudderAngle > 0) {\n                turnDirection = \" Right\";\n            }\n            \n            rudderElement.textContent = `Rudder: ${Math.abs(rudderAngle)}°${turnDirection}`;\n        }\n    }\n    \n    /**\n     * Update race information in the UI\n     */\n    updateRaceInfo() {\n        const positionElement = document.getElementById('position');\n        const timerElement = document.getElementById('timer');\n        \n        if (positionElement) {\n            // In multiplayer, this would show race position\n            positionElement.textContent = 'Position: 1/1';\n        }\n        \n        if (timerElement) {\n            timerElement.textContent = Utils.formatTime(this.state.raceTime);\n        }\n    }\n    \n    /**\n     * Update course information in the UI\n     */\n    updateCourseInfo() {\n        const positionElement = document.getElementById('position');\n        \n        if (positionElement && this.course) {\n            positionElement.textContent = `Buoy: ${this.course.currentBuoy + 1}/${this.course.buoys.length} - Lap: ${this.course.currentLap + 1}/${this.course.laps}`;\n        }\n    }\n    \n    /**\n     * Update player information in the UI\n     */\n    updatePlayerInfo() {\n        // In a real implementation, this would update player-specific UI elements\n    }\n    \n    /**\n     * Stop the game\n     */\n    stop() {\n        if (!this.state.isRunning) return;\n        \n        console.log('Stopping game...');\n        \n        // Stop the renderer\n        this.renderer.stop();\n        \n        // Set game state\n        this.state.isRunning = false;\n        \n        // Disconnect multiplayer if active\n        if (this.multiplayer.enabled && this.multiplayer.socket) {\n            this.multiplayer.socket.disconnect();\n        }\n    }\n    \n    /**\n     * Pause the game\n     */\n    pause() {\n        if (!this.state.isRunning || this.state.isPaused) return;\n        \n        console.log('Pausing game...');\n        this.state.isPaused = true;\n    }\n    \n    /**\n     * Resume the game\n     */\n    resume() {\n        if (!this.state.isRunning || !this.state.isPaused) return;\n        \n        console.log('Resuming game...');\n        this.state.isPaused = false;\n    }\n    \n    /**\n     * Clean up resources\n     */\n    dispose() {\n        this.stop();\n        \n        // Clean up all boats\n        this.boats.forEach(boat => boat.dispose());\n        this.boats.clear();\n        \n        // Clean up environment\n        if (this.environment) {\n            this.environment.dispose();\n        }\n        \n        // Clean up renderer\n        if (this.renderer) {\n            this.renderer.dispose();\n        }\n        \n        // Clean up controls\n        if (this.controls) {\n            this.controls.dispose();\n        }\n    }\n}\n\n// Export the Game class for use in other modules\nexport default Game; ","__webpack_require__.h = () => (\"fa383c117d1c52522edb\")"],"names":[],"sourceRoot":""}